#!/usr/bin/env bash
#
# popcorn: a small program to offer movie suggestions and manage a movie watchlist

progname="${0##*/}"

# files used for the script
listdir="${HOME}/.local/share/${progname}"

lastwatched="${listdir}/lastwatched.tmp"
listbak="${listdir}/watchlist.bak"
listfile="${listdir}/watchlist"
notwatching="${listdir}/notwatching.tmp"
seenbak="${listdir}/seenlist.bak"
seenfile="${listdir}/seenlist"
sortfile="${listdir}/sortfile.tmp"


add_batch () {
	local addcount
	addcount=0

	while (( "$#" > 0 )); do
		if grep -Fixq "${1}" "${listfile}"; then
			printf "'%s' is already on your watchlist.\n" "${1}"
			shift
		else
			printf "%s\n" "${1}" >> "${listfile}"
			(( addcount++ ))
			shift
		fi
	done
	sort "${listfile}" -o "${sortfile}" && mv "${sortfile}" "${listfile}"
	printf "Added %s movie(s) to your watchlist.\n" "${addcount}"
	return
}

cleanup () {
	cat "${notwatching}" >> "${listfile}"
	sort "${listfile}" -o "${sortfile}" && mv "${sortfile}" "${listfile}"
	rm "${notwatching}"
	return
}

# replace this with just a recomendation to use add_batch??
empty_list () {
	clear
	printf "Uh-oh, you don't seem to have any movies on your list.\n"
	printf "Would you like to add some now? [y/n]\n"
	read -r -p "> "
	case ${REPLY} in
		Y|y|Yes|yes|YES)
			printf "Enter the names of movies you'd like to watch. Press <C-d> when done.\n"
			printf "cat > %s\n" "${listfile}"
			cat > "${listfile}"
			printf "Your movie list now has %d movie(s)\n" "$(wc -l < "${listfile}")"
			;;
		*)
			printf "Bye!\n"
			exit
			;;
	esac
	return
}

gen_movie () {
	shuf "${listfile}" | head -n 1
	return
}

remove_batch () {
	local rmcount
	rmcount=0

	while (( "$#" > 0 )); do
		if grep -Fixq "${1}" "${listfile}"; then
			sed -i "$(grep -Fixn "${1}" "${listfile}" | cut -d ":" -f 1)"d "${listfile}"
			(( rmcount++ ))
			shift
		else
			printf "'%s' is not on your watchlist.\n" "${1}"
			shift
		fi
	done
	printf "Removed %d movie(s) from your watchlist.\n" "${rmcount}"
	return
}

reselect () {
	sed -i "$(grep -Fixn "${movie_candidate}" "${listfile}" | cut -d ":" -f 1)"d "${listfile}"
	printf "%s\n" "${movie_candidate}" >> "${notwatching}"
	return
}

reset () {
	# uses 1,2,3,4 instead of the letters used elsewhere. Change?
	printf "Which file would you like to reset?\n1. Watchlist at %s\n2. Seenlist at %s\n3. Both\n4. Quit\n" \
		"${listfile}" "${seenfile}"
	read -r -p "> "
	case "${REPLY}" in
		1)
			printf "Are you sure? This action cannot be undone. [y/n]\n"
			read -r -p "> "
			case "${REPLY}" in
				Y|y|Yes|YES|yes)
					: > "${listfile}"
					printf "Cleared your watchlist.\n"
					;;
				*)
					printf "Changed nothing. Consider backing up your files with '%s backup'.\n" "${progname}"
					exit
					;;
			esac
			;;
		2)
			printf "Are you sure? This action cannot be undone. [y/n]\n"
			read -r -p "> "
			case "${REPLY}" in
				Y|y|Yes|YES|yes)
					: > "${seenfile}"
					printf "Cleared your seenlist.\n"
					;;
				*)
					printf "Changed nothing. Consider backing up your files with '%s backup'.\n" "${progname}"
					exit
					;;
			esac
			;;
		3)  
			printf "Are you sure? This action cannot be undone. [y/n]\n"
			read -r -p "> "
			case "${REPLY}" in
				Y|y|Yes|YES|yes)
					: > "${listfile}"
					: > "${seenfile}" 
					printf "Cleared both your watchlist and seenlist.\n"
					;;
				*)
					printf "Changed nothing. Consider backing up your files with '%s backup'.\n" "${progname}"
					exit
					;;
			esac
			;;
		*)
			printf "Changed nothing.\n"
			exit
			;;
	esac
	rm "${lastwatched}"
}

search_batch () {
	while (( "$#" > 0 )); do
		if grep -Fixq "${1}" "${listfile}"; then
			printf "'%s' is on your watchlist. Would you like to remove it? [y/n]\n" "${1}"
			read -r -p "> "
			case "${REPLY}" in
				Y|y|Yes|YES|yes)
					sed -i "$(grep -Fixn "${1}" "${listfile}" | cut -d ":" -f 1)"d "${listfile}"
					printf "Removed %s from your watchlist.\n" "${1}"
					;;
				*)
					;;
			esac
		else
			printf "'%s' is not on your list. Would you like to add it? [y/n]\n" "${1}"
			read -r -p "> "
			case "${REPLY}" in
				Y|y|Yes|YES|yes)
					printf "%s\n" "${1}" >> "${listfile}"
					printf "Added '%s' to your watchlist.\n" "${1}"
					;;
				*)
					;;
			esac
		fi
		shift
	done
	sort "${listfile}" -o "${sortfile}" && mv "${sortfile}" "${listfile}"
	return
}

update_list () {
	sed -i "$(grep -Fixn "${movie_last}" "${listfile}" | cut -d ":" -f 1)"d "${listfile}"
	# do something better with this?
	printf "%s on %s\n" "${movie_last}" "$(date +%D)" >> "${seenfile}"
	sort "${seenfile}" -o "${sortfile}" && mv "${sortfile}" "${seenfile}"
	return
}

usage () {
	# is there a better way to format this?
	cat <<- EOF

	${progname}: Interactive program to manage a movie watchlist

	Usage: 

	  ${progname} [command]

	  When no command is given, ${progname} functions in interactive mode.

	Commands:

	  add "Movie Title"      Add one or more movies to your watchlist. Place each title within
                         its own set of quotes.
	  backup                 Create a backup of your lists
	  count                  Display the amount of movies in your watchlist
	  help                   Display program use information
	  list                   List the contents of your watchlist
	  remove "Movie Title"   Remove one or more movies from your watchlist. Place each title within
                         its own set of quotes.
	  reset                  Clear either the watchlist, seenlist, or both
	  restore                Restore your lists from backup
	  search "Movie Title"   Search your watchlist for one or more movies. Place each title within
                         its own set of quotes.
	  seen                   List the contents of your seenlist
	  watched "Movie Title"  Remove one or more movies from your watchlist and place them on your
                         seenlist. Place each title within its own set of quotes. If a movie is not
                         on your watchlist, it will still be added to your seenlist.
	  version                Print version number

	EOF
	return
}

watched_batch () {
	local addcount rmcount
	addcount=0
	rmcount=0

	while (( "$#" > 0 )); do
		printf "%s on %s\n" "${1}" "$(date +%D)" >> "${seenfile}"
		(( addcount++ ))
		if grep -Fixq "${1}" "${listfile}"; then
			sed -i "$(grep -Fixn "${1}" "${listfile}" | cut -d ":" -f 1)"d "${listfile}"
			(( rmcount++ ))
		fi
		shift
	done
	sort "${seenfile}" -o "${sortfile}" && mv "${sortfile}" "${seenfile}"
	printf "Removed %d movie(s) from your watchlist, and added %d movie(s) to your seenlist.\n" "${rmcount}" "${addcount}"
	return
}


# check for the existance of the files and directories needed in the script
if [[ ! -e "${listdir}" ]]; then
	mkdir "${listdir}"
fi

if [[ ! -e "${listfile}" ]]; then
	touch "${listfile}"
fi

if [[ ! -e "${seenfile}" ]]; then
	touch "${seenfile}"
fi


# process command line options
while [[ -n "${1}" ]]; do
	case "${1}" in
		add)
			shift
			add_batch "$@"
			exit
			;;
		# should the backup process be automatic? 
		backup)
			cp "${listfile}" "${listbak}"
			cp "${seenfile}" "${seenbak}"
			printf "Watchlist and seenlist backed up.\n"
			exit
			;;
		count)
			printf "Your movie list has %d movie(s).\n" "$(wc -l < "${listfile}")"
			exit
			;;
		help|--help)
			usage
			exit
			;;
		list)
			cat "${listfile}"
			exit
			;;
		remove)
			shift
			remove_batch "$@"
			exit
			;;
		reset)
			reset
			# deliberately not exiting so that it moves to empty_list
			;;
		# is this really needed?
		restore)
			cat "${listbak}" > "${listfile}"
			cat "${seenbak}" > "${seenfile}"
			printf "Watchlist and seenlist restored from backups.\n"
			exit
			;;
		search)
			shift
			search_batch "$@"
			exit
			;;
		seen)
			cat "${seenfile}"
			exit
			;;
		watched)
			shift
			watched_batch "$@"
			exit
			;;
		version|--version)
			printf '%s 0.1.2\n' "${progname}"
			exit
			;;
		*)
			printf "Bad usage. Try '%s help' for more information.\n" "${progname}" >&2
			exit 1
			;;
	esac
	shift
done


# check to see if you watched the movie you chose last time the program was run
if [[ -e "${lastwatched}" ]]; then

	movie_last="$(< "${lastwatched}")"

	clear
	printf "Did you end up watching '%s'? [y/n/q]\n" "${movie_last}"
	read -r -p "> "
	case "${REPLY}" in
		Y|y|Yes|yes|YES)
			update_list
			printf "Updated your watchlist and seenlist.\n"
			rm "${lastwatched}"
			exit
			;;
		Q|q|quit|Quit|QUIT)
			printf "Bye!\n"
			exit
			;;
		*)
			printf "Okay, would you like to watch a different movie?\n"
			read -r -p "> "
			case "${REPLY}" in
				Y|y|Yes|yes|YES)
					rm "${lastwatched}"
					;;
				*)
					printf "Bye!\n"
					exit
					;;
			esac
			;;
	esac
fi



# if an empty movie list is encountered
if [[ ! -s "${listfile}" ]]; then
	empty_list
	printf "Would you like to watch a movie now?\n"
	read -r -p "> "
	case "${REPLY}" in
		Y|y|Yes|yes|YES)
			;;
		*)
			sort "${listfile}" > "${sortfile}" && mv "${sortfile}" "${listfile}"
			printf "Bye!\n"
			exit
			;;
	esac
fi


# pick a random movie from your list and offer it
#
# there MUST be a better way to do this, perhaps with 
# sort -R "$listfile" | while read; do
#	for i in $REPLY; do
clear
printf "Picking a movie for you...\n"
while true; do
	if [[ -s "${listfile}" ]]; then
		movie_candidate="$(gen_movie)"
		printf "Would you like to watch '%s'? [y/n/q]\n" "${movie_candidate}"
		read -r -p "> "
		case "${REPLY}" in
			Y|y|Yes|yes|YES)
				printf "Great! I'll ask you how it went later.\n"
				printf "%s\n" "${movie_candidate}" > "${lastwatched}"
				if [[ -e "${notwatching}" ]]; then
					cleanup
				fi
				exit
				;;
			Q|q|quit|Quit|QUIT)
				printf "Bye!\n"
				if [[ -e "${notwatching}" ]]; then
					cleanup
				fi
				exit
				;;
			*)
				reselect
				continue
				;;
		esac
	else
		printf "There are no more movies on your list. Do you want to go through it again?\n"
		read -r -p "> "
		case "${REPLY}" in 
			Y|y|Yes|YES|yes)
				cleanup
				continue 2
				;;
			*)
				cleanup
				printf "Bye!\n"
				exit
				;;
		esac
	fi
done
